#include<bits/stdc++.h>
using namespace std;

vector<string > tokenize(string& row)
{
	vector<string > tokens;
	string token;
	stringstream ss(row);
	while( getline(ss,token, ',') )
	{
		tokens.push_back(token);	
	}
	return tokens;
}

void read_file(ifstream& file,int* column,int* row,vector <string> &attributes,vector <vector <string> > &table)
{
	string str;
	getline(file,str);
	vector<string > tokens = tokenize(str);
	
	*column = tokens.size();
	
	for(int i=0;i<tokens.size();i++)
	{
		attributes.push_back(tokens[i]);
	}
	cout<<"Attributes-> "<<endl;
	for(int i=0;i<attributes.size();i++)
	{
		cout<<attributes[i]<<endl;
	}
	cout<<endl;

	while(file.good())
	{
		getline(file,str);
		if(file.eof())
		{
			return;
		}
		*row +=1;		
		vector<string> tuple = tokenize(str);
		if(tuple.size()!=*column)
		{
			cout<<"Error.Tuple is incomplete "<<*row<<endl;
			*row -= 1;
		}
		else
		{
			table.push_back(tuple);
		}
		
	}
	
	return;
}

vector <string> parse(string& row)
{
	vector <string> tokens;
	string token;
	stringstream ss(row);
	while( getline(ss,token, ' ') )
	{
		tokens.push_back(token);	
	}
	return tokens;
}

set <vector <string> > project(vector<int> &flag,vector <vector <string> > &table,int row)
{
	cout<<endl;
	// cout<<"in project"<<endl;
	set< vector <string> > projection;
	
	cout<<endl;
	//cout<<"row = "<<row<<endl;

	for(int i=0;i<row;i++)
	{
		vector <string> tuple;
		for(int j=0;j<flag.size();j++)
		{
			tuple.push_back(table[i][flag[j]]);
		}
		// for(int k=0;k<tuple.size();k++)
		// {
		// 	cout<<tuple[k]<<"	";
		// }
		// cout<<endl;
		projection.insert(tuple);

	}
	//cout<<endl;
	return projection;
}




void printsetofstringvector(set <vector <string> > &projection,vector <int> &flag)
{
	cout<<endl;
	//cout<<"in print"<<endl;
	set< vector <string> >::iterator i;
	for(i=projection.begin();i!=projection.end();++i)
	{
		vector < string > tuple = *i;
		for(int j=0;j<tuple.size();j++)
		{
			cout<<setw(25)<<left<<tuple[j];
		}
		cout<<endl;
	}
	//cout<<"done"<<endl;
	return;
}
